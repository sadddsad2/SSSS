name: s-Keepalive
on:
  schedule:
    # Beijing time is UTC+8, UTC 17:00-22:00 corresponds to Beijing Time 01:00-06:00
    # Using multiple cron schedules to implement randomness
    - cron: '0 17 * * *'  # UTC 17:00 (Beijing 01:00)
    - cron: '0 18 * * *'  # UTC 18:00 (Beijing 02:00)
    - cron: '0 19 * * *'  # UTC 19:00 (Beijing 03:00)
    - cron: '0 20 * * *'  # UTC 20:00 (Beijing 04:00)
    - cron: '0 21 * * *'  # UTC 21:00 (Beijing 05:00)
    - cron: '0 22 * * *'  # UTC 22:00 (Beijing 06:00)
  # Manual trigger option
  workflow_dispatch:

jobs:
  keepalive:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Random execution check
      id: random_check
      run: |
        # Get current hour in UTC
        CURRENT_HOUR=$(date -u +"%H")
        
        # Generate random hour between 17-22 for today
        # Use date as seed to ensure consistency within the same day
        TODAY=$(date -u +"%Y%m%d")
        RANDOM_SEED=$(echo "$TODAY" | md5sum | awk '{print $1}' | tr -d a-z | cut -c 1-8)
        
        # Use seed to generate a number between 17-22
        RANDOM_HOUR=$(( 17 + (RANDOM_SEED % 6) ))
        
        echo "Current UTC hour: $CURRENT_HOUR"
        echo "Today's randomly selected hour: $RANDOM_HOUR"
        
        # Only continue if the current hour matches the random hour
        if [[ "$CURRENT_HOUR" -eq "$RANDOM_HOUR" ]]; then
          echo "EXECUTE=true" >> $GITHUB_OUTPUT
          echo "Executing workflow at randomly selected hour"
        else
          echo "EXECUTE=false" >> $GITHUB_OUTPUT
          echo "Current hour doesn't match randomly selected hour, skipping execution"
        fi
       
    - name: Checkout code
      if: steps.random_check.outputs.EXECUTE == 'true' || github.event_name == 'workflow_dispatch'
      uses: actions/checkout@v3
      
    - name: Restore latest cookies cache
      if: steps.random_check.outputs.EXECUTE == 'true' || github.event_name == 'workflow_dispatch'
      id: cache-cookies-restore
      uses: actions/cache/restore@v3
      with:
        path: sliplane_cookies.json
        key: sliplane_cookies-restore-attempt-${{ runner.os }}
        restore-keys: |
          sliplane_cookies-
    
    - name: Check if cache was found
      if: steps.random_check.outputs.EXECUTE == 'true' || github.event_name == 'workflow_dispatch'
      id: check-cache
      run: |
        if [ -f "sliplane_cookies.json" ]; then
          echo "CACHE_HIT=true" >> $GITHUB_OUTPUT
          echo "Using cached cookies file"
        else
          echo "CACHE_HIT=false" >> $GITHUB_OUTPUT
          echo "No cached cookies found"
        fi
    
    - name: Download sliplane_cookies
      if: (steps.check-cache.outputs.CACHE_HIT != 'true' && (steps.random_check.outputs.EXECUTE == 'true' || github.event_name == 'workflow_dispatch'))
      run: |
        curl -s -L "${{ secrets.COOK_URL }}" -o sliplane_cookies.json
        if [ -f sliplane_cookies.json ]; then
          echo "Downloaded sliplane_cookies.json successfully"
        else
          echo "Error: Failed to download sliplane_cookies.json"
          exit 1
        fi
    
    - name: Set up Python
      if: steps.random_check.outputs.EXECUTE == 'true' || github.event_name == 'workflow_dispatch'
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Restore pip cache
      if: steps.random_check.outputs.EXECUTE == 'true' || github.event_name == 'workflow_dispatch'
      id: cache-pip
      uses: actions/cache/restore@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Restore Playwright cache
      if: steps.random_check.outputs.EXECUTE == 'true' || github.event_name == 'workflow_dispatch'
      id: cache-playwright
      uses: actions/cache/restore@v3
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/playwright.version') }}
        restore-keys: |
          ${{ runner.os }}-playwright-
          
    - name: Create playwright.version file if not exists
      if: steps.random_check.outputs.EXECUTE == 'true' || github.event_name == 'workflow_dispatch'
      run: |
        if [ ! -f "playwright.version" ]; then
          playwright_version=$(pip show playwright 2>/dev/null | grep Version | cut -d ' ' -f 2 || echo "1.34.0")
          echo "$playwright_version" > playwright.version
        fi
    
    - name: Install dependencies
      if: steps.random_check.outputs.EXECUTE == 'true' || github.event_name == 'workflow_dispatch'
      run: |
        python -m pip install --upgrade pip
        
        # Always install playwright explicitly to ensure it's available
        pip install playwright
        
        # Install from requirements.txt if it exists
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        
        # Verify playwright is installed correctly
        python -c "import playwright; print('Playwright successfully imported')"
        
        # Only install Playwright browsers if cache doesn't exist
        if [ "${{ steps.cache-playwright.outputs.cache-hit }}" != 'true' ]; then
          echo "Installing Playwright browsers..."
          python -m playwright install firefox
        else
          echo "Using cached Playwright browsers"
        fi
      
    - name: Run Python Script
      if: steps.random_check.outputs.EXECUTE == 'true' || github.event_name == 'workflow_dispatch'
      env:
        GT_PW: ${{ secrets.GT_PW }}
        ENVSET: ${{ secrets.ENVSET }}
        DOCKER: ${{ secrets.DOCKER }}
        PYTHONPATH: $PYTHONPATH:$(pwd)
      run: |
        # Print Python environment info for debugging
        which python
        python -V
        echo "PYTHONPATH: $PYTHONPATH"
        
        # Verify modules are accessible
        python -m pip list | grep playwright
        
        # Run the script with explicit Python path
        python main.py
        
    - name: Get current timestamp for cookie cache key
      if: steps.random_check.outputs.EXECUTE == 'true' || github.event_name == 'workflow_dispatch'
      id: timestamp_generator
      run: echo "CACHE_TIMESTAMP=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT
      
    - name: Save cookies cache with timestamp
      if: steps.random_check.outputs.EXECUTE == 'true' || github.event_name == 'workflow_dispatch'
      uses: actions/cache/save@v3
      with:
        path: sliplane_cookies.json
        key: sliplane_cookies-${{ steps.timestamp_generator.outputs.CACHE_TIMESTAMP }}
        
    - name: Save pip cache
      if: steps.random_check.outputs.EXECUTE == 'true' || github.event_name == 'workflow_dispatch'
      uses: actions/cache/save@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        
    - name: Save Playwright cache
      if: steps.random_check.outputs.EXECUTE == 'true' || github.event_name == 'workflow_dispatch'
      uses: actions/cache/save@v3
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/playwright.version') }}
        
  # 独立监控任务，在主任务之后运行，只在出错时发送通知
  monitor:
    needs: keepalive  # 这确保监控任务在主任务完成后才运行
    runs-on: ubuntu-latest
    if: ${{ always() }}  # 无论主任务成功还是失败，都运行这个任务
    
    steps:
      - name: Check main job status
        id: check_status
        run: |
          echo "Main job status: ${{ needs.keepalive.result }}"
     
          if [[ "${{ needs.keepalive.result }}" == "failure" || "${{ needs.keepalive.result }}" == "cancelled" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.keepalive.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=unknown" >> $GITHUB_OUTPUT
          fi
      
      # 只在出错或网站状态异常时发送通知
      - name: Send Telegram notification on error
        if: >-
          steps.check_status.outputs.status == 'failure'
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ⚠️ DeepNote Keepalive 异常警报!
            
            ${{ steps.check_status.outputs.status == 'failure' && '工作流执行失败!' }}
            
            仓库: ${{ github.repository }}
            分支: ${{ github.ref_name }}
            主任务状态: ${{ needs.keepalive.result }}
            
            执行时间: ${{ github.run_started_at }}
            查看详情: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
